/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NeoImport } from './routes/neo'
import { Route as DetailsImport } from './routes/$details'
import { Route as IndexImport } from './routes/index'
import { Route as PhotoDetailsDateImport } from './routes/photoDetails.$date'

// Create/Update Routes

const NeoRoute = NeoImport.update({
  id: '/neo',
  path: '/neo',
  getParentRoute: () => rootRoute,
} as any)

const DetailsRoute = DetailsImport.update({
  id: '/$details',
  path: '/$details',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PhotoDetailsDateRoute = PhotoDetailsDateImport.update({
  id: '/photoDetails/$date',
  path: '/photoDetails/$date',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$details': {
      id: '/$details'
      path: '/$details'
      fullPath: '/$details'
      preLoaderRoute: typeof DetailsImport
      parentRoute: typeof rootRoute
    }
    '/neo': {
      id: '/neo'
      path: '/neo'
      fullPath: '/neo'
      preLoaderRoute: typeof NeoImport
      parentRoute: typeof rootRoute
    }
    '/photoDetails/$date': {
      id: '/photoDetails/$date'
      path: '/photoDetails/$date'
      fullPath: '/photoDetails/$date'
      preLoaderRoute: typeof PhotoDetailsDateImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$details': typeof DetailsRoute
  '/neo': typeof NeoRoute
  '/photoDetails/$date': typeof PhotoDetailsDateRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$details': typeof DetailsRoute
  '/neo': typeof NeoRoute
  '/photoDetails/$date': typeof PhotoDetailsDateRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$details': typeof DetailsRoute
  '/neo': typeof NeoRoute
  '/photoDetails/$date': typeof PhotoDetailsDateRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$details' | '/neo' | '/photoDetails/$date'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$details' | '/neo' | '/photoDetails/$date'
  id: '__root__' | '/' | '/$details' | '/neo' | '/photoDetails/$date'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DetailsRoute: typeof DetailsRoute
  NeoRoute: typeof NeoRoute
  PhotoDetailsDateRoute: typeof PhotoDetailsDateRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DetailsRoute: DetailsRoute,
  NeoRoute: NeoRoute,
  PhotoDetailsDateRoute: PhotoDetailsDateRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$details",
        "/neo",
        "/photoDetails/$date"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$details": {
      "filePath": "$details.tsx"
    },
    "/neo": {
      "filePath": "neo.tsx"
    },
    "/photoDetails/$date": {
      "filePath": "photoDetails.$date.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
